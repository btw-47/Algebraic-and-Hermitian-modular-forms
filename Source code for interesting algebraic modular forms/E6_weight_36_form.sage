from weilrep.weilrep.amf import AlgebraicModularForm, AlgebraicModularFormEigenform

K.<sqrt3> = QuadraticField(3)
U.<sqrt2> = K.extension(x*x - 2)
sqrt6 = sqrt2 * sqrt3
R.<x1, x2, x3, x4, x5, x6> = PolynomialRing(U)
l1 = (2*sqrt2 / sqrt3) * x6
l2 = (sqrt2 / sqrt3) * (sqrt3 * x5 - x6)
l3 = (sqrt2 / sqrt3) * (-sqrt3 * x5 - x6)
l4 = x3 + x4 - (sqrt2 / sqrt3)*x6
l5 = -x3 + x4 - (sqrt2 / sqrt3)*x6
l6 = x3 - x4 - (sqrt2 / sqrt3)*x6
l7 = -x3 - x4 - (sqrt2 / sqrt3)*x6
l8 = x1 + x2 - (sqrt2 / sqrt3)*x6
l9 = -x1 + x2 - (sqrt2 / sqrt3)*x6
l10 = x1 - x2 - (sqrt2 / sqrt3)*x6
l11 = -x1 - x2 - (sqrt2 / sqrt3)*x6
l12 = x2 + x4 + (1 / sqrt6) * (sqrt3 * x5 + x6)
l13 = -x2 + x4 + (1 / sqrt6) * (sqrt3 * x5 + x6)
l14 = x2 - x4 + (1 / sqrt6) * (sqrt3 * x5 + x6)
l15 = -x2 - x4 + (1 / sqrt6) * (sqrt3 * x5 + x6)
l16 = x1 + x3 + (1 / sqrt6) * (sqrt3 * x5 + x6)
l17 = -x1 + x3 + (1 / sqrt6) * (sqrt3 * x5 + x6)
l18 = x1 - x3 + (1 / sqrt6) * (sqrt3 * x5 + x6)
l19 = -x1 - x3 + (1 / sqrt6) * (sqrt3 * x5 + x6)
l20 = x2 + x3 - (1 / sqrt6) * (sqrt3 * x5 - x6)
l21 = -x2 + x3 - (1 / sqrt6) * (sqrt3 * x5 - x6)
l22 = x2 - x3 - (1 / sqrt6) * (sqrt3 * x5 - x6)
l23 = -x2 - x3 - (1 / sqrt6) * (sqrt3 * x5 - x6)
l24 = x1 + x4 - (1 / sqrt6) * (sqrt3 * x5 - x6)
l25 = -x1 + x4 - (1 / sqrt6) * (sqrt3 * x5 - x6)
l26 = x1 - x4 - (1 / sqrt6) * (sqrt3 * x5 - x6)
l27 = -x1 - x4 - (1 / sqrt6) * (sqrt3 * x5 - x6)
L = [l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20, l21, l22, l23, l24, l25, l26, l27]
p2, p5, p6, p8, p9, p12 = [sum(x**k for x in L) for k in [2, 5, 6, 8, 9, 12]]
#B = matrix([[1, -1, 0, 0, 0, 0], [0, 1, -1, 0, 0, 0], [0, 0, 1, -1, 0, 0], [0, 0, 0, 1, 1, 0], [-1/2, -1/2, -1/2, -1/2, -1/2, sqrt3/2], [0,0, 0, 1, -1, 0]])
B = matrix([[0, 1, -1, 0, 1/sqrt2, sqrt3/sqrt2], [0, 0, 1, -1, -sqrt2, 0], [0, 0, 0, 2, 0, 0], [0, 0, 1, -1, sqrt2, 0], [0, 1, -1, 0, -1/sqrt2, -sqrt3/sqrt2], [1, -1, -1, -1, 0, 0]]) / sqrt2
m = AlgebraicModularForms(matrix(ZZ, B * B.transpose()))
q2, q5, q6, q8, q9, q12 = [p(*(B.transpose() * vector(R.gens()))) for p in [p2, p5, p6, p8, p9, p12]]
q5 /= sqrt2
q9 /= sqrt2
R.<x1, x2, x3, x4, x5, x6> = PolynomialRing(QQ)
M = matrix([R(x).gradient() for x in [q2, q5, q6, q8, q9, q12]])
f = lambda v1, v2, v3, v4, v5, v6: matrix(6, 6, [a(v1, v2, v3, v4, v5, v6) for a in M.list()]).determinant()
h = AlgebraicModularForm(m, [f], 36, spin = 1, det = -1)
h.base_field = lambda:QQ
h.__class__ = AlgebraicModularFormEigenform
h._AlgebraicModularFormEigenform__field = QQ
